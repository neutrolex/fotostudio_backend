# Generated by Django 5.2.6 on 2025-09-13 12:45

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(help_text='Nombre de usuario único para el administrador', max_length=150, unique=True)),
                ('email', models.EmailField(help_text='Dirección de correo electrónico única', max_length=254, unique=True)),
                ('password', models.CharField(help_text='Contraseña hasheada del administrador', max_length=150)),
                ('first_name', models.CharField(blank=True, help_text='Nombre del administrador', max_length=150)),
                ('last_name', models.CharField(blank=True, help_text='Apellido del administrador', max_length=150)),
                ('is_active', models.BooleanField(default=True, help_text='Indica si la cuenta del administrador está activa')),
                ('is_staff', models.BooleanField(default=True, help_text='Indica si el administrador tiene permisos de staff')),
                ('date_joined', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de registro del administrador')),
                ('last_login', models.DateTimeField(blank=True, help_text='Fecha y hora del último acceso al sistema', null=True)),
            ],
            options={
                'verbose_name': 'Administrador',
                'verbose_name_plural': 'Administradores',
                'db_table': 'admins',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='DocumentTypes',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nombre del tipo de documento (ej: DNI, Pasaporte, etc.)', max_length=100)),
            ],
            options={
                'verbose_name': 'Tipo de Documento',
                'verbose_name_plural': 'Tipos de Documentos',
                'db_table': 'document_types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('tenant_id', models.IntegerField(default=1, help_text='ID del tenant para soporte multi-tenancy')),
                ('document_number', models.CharField(blank=True, help_text='Número de documento de identidad único', max_length=255, null=True, unique=True)),
                ('name', models.CharField(blank=True, help_text='Nombre del usuario', max_length=255, null=True)),
                ('paternal_lastname', models.CharField(blank=True, help_text='Apellido paterno del usuario', max_length=255, null=True)),
                ('maternal_lastname', models.CharField(blank=True, help_text='Apellido materno del usuario', max_length=255, null=True)),
                ('email', models.CharField(help_text='Dirección de correo electrónico única', max_length=255, unique=True)),
                ('phone', models.CharField(blank=True, help_text='Número de teléfono del usuario', max_length=100, null=True)),
                ('photo_url', models.CharField(blank=True, help_text='URL de la foto de perfil del usuario', max_length=255, null=True)),
                ('sex', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Femenino'), ('O', 'Otro')], help_text='Sexo del usuario', max_length=1, null=True)),
                ('username', models.CharField(help_text='Nombre de usuario único para login', max_length=150, unique=True)),
                ('password_change', models.BooleanField(default=False, help_text='Indica si el usuario debe cambiar su contraseña')),
                ('last_session', models.DateTimeField(auto_now=True, help_text='Fecha y hora de la última sesión activa')),
                ('account_statement', models.CharField(choices=[('A', 'Activo'), ('I', 'Inactivo')], default='A', help_text='Estado de la cuenta del usuario', max_length=1)),
                ('email_verified_at', models.DateTimeField(blank=True, help_text='Fecha y hora de verificación del email', null=True)),
                ('country_id', models.IntegerField(blank=True, help_text='ID del país del usuario', null=True)),
                ('remember_token', models.CharField(blank=True, help_text='Token para recordar sesión del usuario', max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de creación del usuario')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha y hora de última actualización')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Fecha y hora de eliminación lógica (soft delete)', null=True)),
                ('last_login', models.DateTimeField(blank=True, help_text='Fecha y hora del último login', null=True)),
                ('is_superuser', models.BooleanField(default=False, help_text='Indica si es superusuario del sistema')),
                ('is_staff', models.BooleanField(default=False, help_text='Indica si tiene permisos de staff')),
                ('is_active', models.BooleanField(default=True, help_text='Indica si la cuenta está activa')),
                ('date_joined', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de registro del usuario')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('document_type', models.ForeignKey(blank=True, db_column='document_type_id', help_text='Tipo de documento del usuario', null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.documenttypes')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'db_table': 'users',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='UsersVerificationCode',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(blank=True, help_text='Código de verificación generado', max_length=255, null=True)),
                ('expires_at', models.DateTimeField(help_text='Fecha y hora de expiración del código')),
                ('failed_attempts', models.IntegerField(default=0, help_text='Número de intentos fallidos de verificación')),
                ('locked_until', models.DateTimeField(blank=True, help_text='Fecha hasta la cual el código está bloqueado por intentos fallidos', null=True)),
                ('temp_email', models.CharField(blank=True, help_text='Email temporal almacenado para cambios de email', max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de creación del código')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Fecha y hora de última actualización')),
                ('user', models.ForeignKey(blank=True, db_column='user_id', help_text='Usuario propietario del código de verificación', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Código de Verificación',
                'verbose_name_plural': 'Códigos de Verificación',
                'db_table': 'users_verification_code',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='users',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AddIndex(
            model_name='users',
            index=models.Index(fields=['username'], name='users_usernam_baeb4b_idx'),
        ),
        migrations.AddIndex(
            model_name='users',
            index=models.Index(fields=['document_number'], name='users_documen_f7a4ea_idx'),
        ),
        migrations.AddIndex(
            model_name='users',
            index=models.Index(fields=['tenant_id'], name='users_tenant__d262cd_idx'),
        ),
        migrations.AddIndex(
            model_name='usersverificationcode',
            index=models.Index(fields=['user_id'], name='users_verif_user_id_ecd76a_idx'),
        ),
        migrations.AddIndex(
            model_name='usersverificationcode',
            index=models.Index(fields=['expires_at'], name='users_verif_expires_885c67_idx'),
        ),
        migrations.AddIndex(
            model_name='usersverificationcode',
            index=models.Index(fields=['code'], name='users_verif_code_979060_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usersverificationcode',
            unique_together={('user_id',)},
        ),
    ]
